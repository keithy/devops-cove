#!/usr/bin/env ruby
# frozen_string_literal: true
require 'yaml'
require 'optparse'
require 'find'

mode = :lint
canon_list = []
OptionParser.new do |o|
  o.on('--sync') { mode = :sync }
  o.on('--canon FILE', 'Canonical file (repeatable)') { |f| canon_list << File.expand_path(f) }
end.parse!

root = File.expand_path(File.join(__dir__, '..', '..'))
refs = {}
files = []
Find.find(root) do |p|
  next unless p.end_with?('.yml', '.yaml')
  next if File.directory?(p)
  files << p
end
files.sort!

get_steps = lambda do |path|
  y = YAML.load_file(path) rescue nil
  return [] unless y.is_a?(Hash)
  steps = []
  (y['jobs'] || {}).each_value do |job|
    s = job.is_a?(Hash) ? job['steps'] : nil
    next unless s.is_a?(Array)
    s.each { |e| steps << e if e.is_a?(Hash) && e['name'].is_a?(String) }
  end
  steps
end

seed_files = canon_list.empty? ? files : canon_list
seed_files.each do |f|
  next unless files.include?(f) || File.exist?(f)
  get_steps.call(f).each do |s|
    name = s['name']
    refs[name] ||= { file: f, body: s.reject { |k,_| k == 'id' } }
  end
end
files.each do |f|
  get_steps.call(f).each do |s|
    name = s['name']
    refs[name] ||= { file: f, body: s.reject { |k,_| k == 'id' } }
  end
end

status = 0
files.each do |f|
  y = YAML.load_file(f) rescue nil
  next unless y.is_a?(Hash) && y['jobs'].is_a?(Hash)
  changed = false
  y['jobs'].each do |_, job|
    next unless job.is_a?(Hash) && job['steps'].is_a?(Array)
    job['steps'].each_with_index do |s, i|
      next unless s.is_a?(Hash) && s['name'].is_a?(String)
      ref = refs[s['name']]
      next unless ref
      cur = s.reject { |k,_| k == 'id' }
      if cur != ref[:body]
        if mode == :sync
          job['steps'][i] = Marshal.load(Marshal.dump(ref[:body]))
          changed = true
        else
          puts %(canonical step "#{s['name']}" (#{ref[:file]}))
          puts YAML.dump(ref[:body]).strip
          puts "#{f}:"
          puts YAML.dump(cur).strip
          status = 1
        end
      end
    end
  end
  if changed
    File.write(f, y.to_yaml)
    puts "[SYNC] #{f}"
  end
end
exit status
